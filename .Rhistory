water_int_radiusk$pop_est<- extract(raster_population,water_int_radiusk, fun = sum, na.rm=TRUE)
# Find which catchment each polygon belongs to using its centroid
assign.catchment <- st_intersection(st_centroid(water_int_radiusk), catchment)
# Calculated total population living X distance for each facility
npeople <- assign.catchment %>% group_by(Names) %>%
summarize(pop_distance = sum(pop_est, na.rm = TRUE))
finalized <- merge(catchment, st_drop_geometry(npeople), by='Names', all.x = TRUE)
return(out=finalized)
}
nachulu <- function(water, distance, catchment, raster_population){
#Buffer the 'water' vector file by 'distance' meters
buffer_radiusk <- st_buffer(water, distance)
# Dissolve the buffers
buffer_radiusk_union <- st_cast(st_union(buffer_radiusk),"POLYGON")
# polygons being seen to be in multiple catchments
st_intersects(water_int_radiusk, catchment)
#Estimation of population within X kilometer buffer
water_int_radiusk$pop_est<- extract(raster_population,water_int_radiusk, fun = sum, na.rm=TRUE)
# Find which catchment each polygon belongs to using its centroid
assign.catchment <- st_intersection(st_centroid(water_int_radiusk), catchment)
# Calculated total population living X distance for each facility
npeople <- assign.catchment %>% group_by(Names) %>%
summarize(pop_distance = sum(pop_est, na.rm = TRUE))
finalized <- merge(catchment, st_drop_geometry(npeople), by='Names', all.x = TRUE)
return(out=finalized)
}
print(finalized)
nachulu <- function(water, distance, catchment, raster_population){
#Buffer the 'water' vector file by 'distance' meters
buffer_radiusk <- st_buffer(water, distance)
# Dissolve the buffers
buffer_radiusk_union <- st_cast(st_union(buffer_radiusk),"POLYGON")
# polygons being seen to be in multiple catchments
st_intersects(water_int_radiusk, catchment)
#Estimation of population within X kilometer buffer
water_int_radiusk$pop_est<- extract(raster_population,water_int_radiusk, fun = sum, na.rm=TRUE)
# Find which catchment each polygon belongs to using its centroid
assign.catchment <- st_intersection(st_centroid(water_int_radiusk), catchment)
# Calculated total population living X distance for each facility
npeople <- assign.catchment %>% group_by(Names) %>%
summarize(pop_distance = sum(pop_est, na.rm = TRUE))
finalized <- merge(catchment, st_drop_geometry(npeople), by='Names', all.x = TRUE)
return(out=finalized)
}
print(nachulu)
nachulu <- function(water, distance, catchment, raster_population){
#Buffer the 'water' vector file by 'distance' meters
buffer_radiusk <- st_buffer(water, distance)
# Dissolve the buffers
buffer_radiusk_union <- st_cast(st_union(buffer_radiusk),"POLYGON")
# polygons being seen to be in multiple catchments
st_intersects(water_int_radiusk, catchment)
#Estimation of population within X kilometer buffer
water_int_radiusk$pop_est<- extract(raster_population,water_int_radiusk, fun = sum, na.rm=TRUE)
# Find which catchment each polygon belongs to using its centroid
assign.catchment <- st_intersection(st_centroid(water_int_radiusk), catchment)
# Calculated total population living X distance for each facility
npeople <- assign.catchment %>% group_by(Names) %>%
summarize(pop_distance = sum(pop_est, na.rm = TRUE))
finalized <- merge(catchment, st_drop_geometry(npeople), by='Names', all.x = TRUE)
return(out=finalized)
}
return(finalized)
nachulu <- function(water, distance, catchment, raster_population){
#Buffer the 'water' vector file by 'distance' meters
buffer_radiusk <- st_buffer(water, distance)
# Dissolve the buffers
buffer_radiusk_union <- st_cast(st_union(buffer_radiusk),"POLYGON")
# polygons being seen to be in multiple catchments
st_intersects(water_int_radiusk, catchment)
#Estimation of population within X kilometer buffer
water_int_radiusk$pop_est<- extract(raster_population,water_int_radiusk, fun = sum, na.rm=TRUE)
# Find which catchment each polygon belongs to using its centroid
assign.catchment <- st_intersection(st_centroid(water_int_radiusk), catchment)
# Calculated total population living X distance for each facility
npeople <- assign.catchment %>% group_by(Names) %>%
summarize(pop_distance = sum(pop_est, na.rm = TRUE))
finalized <- merge(catchment, st_drop_geometry(npeople), by='Names', all.x = TRUE)
return(out=finalized)
}
nachulu()
nachulu <- function(water, distance, catchment, raster_population){
#Buffer the 'water' vector file by 'distance' meters
buffer_radiusk <- st_buffer(water, distance)
# Dissolve the buffers
buffer_radiusk_union <- st_cast(st_union(buffer_radiusk),"POLYGON")
# polygons being seen to be in multiple catchments
st_intersects(water_int_radiusk, catchment)
#Estimation of population within X kilometer buffer
water_int_radiusk$pop_est<- extract(raster_population,water_int_radiusk, fun = sum, na.rm=TRUE)
# Find which catchment each polygon belongs to using its centroid
assign.catchment <- st_intersection(st_centroid(water_int_radiusk), catchment)
# Calculated total population living X distance for each facility
npeople <- assign.catchment %>% group_by(Names) %>%
summarize(pop_distance = sum(pop_est, na.rm = TRUE))
finalized <- merge(catchment, st_drop_geometry(npeople), by='Names', all.x = TRUE)
return(out=finalized)
}
nachulu
# Create buffer distances for 2017 object
run1k_2017<- nachulu(water=surfaceWater_2017, distance=1000, catchment=malire, raster_population = kasungu_population_2017)
# Create buffer distances for 2017 object
# run1k_2017<- nachulu(water=surfaceWater_2017, distance=1000, catchment=malire, raster_population = kasungu_population_2017)
# run1k_2017$pop_1k <- run1k_2017$pop_distance
#
# run2k_2017<- nachulu(water=surfaceWater_2017, distance=2000, catchment=malire, raster_population = kasungu_population_2017)
# run2k_2017$pop_2k <- run2k_2017$pop_distance
#
# run3k_2017<- nachulu(water=surfaceWater_2017, distance=3000, catchment=malire, raster_population = kasungu_population_2017)
#
# run3k_2017$pop_3k<-run3k_2017$pop_distance
# Create buffer distances for 2017 object
run1k_2018<- nachulu(water=surfaceWater_2018, distance=1000, catchment=malire, raster_population = kasungu_population_2018)
surfaceWater_2018 <- st_as_sf(st_cast(st_union(st_buffer(water_2018, 30)), "POLYGON"))
water_table <- read.csv(paste0(pathname, "KasunguData.csv"))
pathname <- "C:\Users\cnkolokosa\Documents\Pre-MSc\Kasungu\practice"
pathname <- "C:/Users/cnkolokosa/Documents/Pre-MSc/Kasungu/practice"
library(dplyr)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(knitr)
library(raster)
library(rgdal)
library(sf)
library(sp)
library(tmap)
library(spdep)
library(maptools)
library(exactextractr)
water_table <- read.csv(paste0(pathname, "KasunguData.csv"))
water_table <- read.csv(paste0(pathname, "practice/KasunguData.csv"))
malire <- st_read(paste0(pathname, "facility_catchments_2004.shp"))
setwd("~/Pre-MSc/Kasungu/practice")
setwd("~/Pre-MSc/Kasungu/practice")
water_table <- read.csv("practice/KasunguData.csv")
water_table <- read.csv("KasunguData.csv")
malire <- st_read(dsn = getwd(), layer = "facility_catchments_2004.shp")
water_table <- read_csv("KasunguData.csv")
setwd("~/Pre-MSc/Kasungu/practice/")
water_table <- read.csv("KasunguData.csv")
pathname <- "~/Pre-MSc/Kasungu/practice/"
water_table <- read.csv(paste0(pathname, "KasunguData.csv"))
malire <- st_read(paste0(pathname, "facility_catchments_2004.shp"))
kasungu_population_2018 <- raster(paste0(pathname,"mwi_ppp_2018_1km_Aggregated.tif"))
kasungu_population_2019 <- raster(paste0(pathname,"mwi_ppp_2019_1km_Aggregated.tif"))
water_2018 <- st_read(paste0(pathname,"kasungu_2018_water.shp"))
water_2019 <- st_read(paste0(pathname,"kasungu_2019_water.shp"))
# Add a field ID to waterbodies polygons
water_2018$ID <- 1:nrow(water_2018)
water_2019$ID <- 1:nrow(water_2019)
water_table %>%
glimpse() %>%
summary()
water_table %>%  plotly::plot_ly(
y = ~Names ,
x = ~dr_2015,
type = "bar",
orientation = 'h',
name = "2015") %>%
plotly::add_trace(
x = ~ dr_2016,
name = "2016") %>%
plotly::add_trace(
x = ~ dr_2017,
name = "2017") %>%
plotly::add_trace(
x = ~ dr_2018,
name = "2018") %>%
plotly::add_trace(
x = ~ dr_2019,
name = "2019") %>%
plotly::layout(
barmode = "stack",
xaxis = list(title = "Total malaria cases"),
yaxis = list(title = ""),
hovermode = "compare",
margin = list(
b = 10,
t = 10,
pad = 2))
kasungu_population_2018 <- projectRaster(kasungu_population_2018,
crs="+proj=utm +zone=36 +south +datum=WGS84 +units=m")
kasungu_population_2019 <- projectRaster(kasungu_population_2019,
crs="+proj=utm +zone=36 +south +datum=WGS84 +units=m")
surfaceWater_2018 <- st_as_sf(st_cast(st_union(st_buffer(water_2018, 30)), "POLYGON"))
surfaceWater_2019 <- st_as_sf(st_cast(st_union(st_buffer(water_2019, 30)), "POLYGON"))
# View buffer
class(surfaceWater_2018)
head(surfaceWater_2018)
nachulu <- function(water, distance, catchment, raster_population){
#Buffer the 'water' vector file by 'distance' meters
buffer_radiusk <- st_buffer(water, distance)
# Dissolve the buffers
buffer_radiusk_union <- st_cast(st_union(buffer_radiusk),"POLYGON")
# polygons being seen to be in multiple catchments
st_intersects(water_int_radiusk, catchment)
#Estimation of population within X kilometer buffer
water_int_radiusk$pop_est<- extract(raster_population,water_int_radiusk, fun = sum, na.rm=TRUE)
# Find which catchment each polygon belongs to using its centroid
assign.catchment <- st_intersection(st_centroid(water_int_radiusk), catchment)
# Calculated total population living X distance for each facility
npeople <- assign.catchment %>% group_by(Names) %>%
summarize(pop_distance = sum(pop_est, na.rm = TRUE))
finalized <- merge(catchment, st_drop_geometry(npeople), by='Names', all.x = TRUE)
return(out=finalized)
}
# Create buffer distances for 2017 object
run1k_2017<- nachulu(water=surfaceWater_2017, distance=1000, catchment=malire, raster_population = kasungu_population_2017)
# Create buffer distances for 2017 object
# run1k_2017<- nachulu(water=surfaceWater_2017, distance=1000, catchment=malire, raster_population = kasungu_population_2017)
# run1k_2017$pop_1k <- run1k_2017$pop_distance
#
# run2k_2017<- nachulu(water=surfaceWater_2017, distance=2000, catchment=malire, raster_population = kasungu_population_2017)
# run2k_2017$pop_2k <- run2k_2017$pop_distance
#
# run3k_2017<- nachulu(water=surfaceWater_2017, distance=3000, catchment=malire, raster_population = kasungu_population_2017)
#
# run3k_2017$pop_3k<-run3k_2017$pop_distance
# Create buffer distances for 2017 object
run1k_2018<- nachulu(water=surfaceWater_2018, distance=1000, catchment=malire, raster_population = kasungu_population_2018)
# Create buffer distances for 2018 object
run1k_2018<- nachulu(water=surfaceWater_2018, distance=1000, catchment=malire, raster_population = kasungu_population_2018)
nachulu <- function(water, distance, catchment, raster_population){
#Buffer the 'water' vector file by 'distance' meters
buffer_radiusk <- st_buffer(water, distance)
# Dissolve the buffers
buffer_radiusk_union <- st_cast(st_union(buffer_radiusk),"POLYGON")
# polygons being seen to be in multiple catchments
st_intersects(water_int_radiusk, catchment)
#Estimation of population within X kilometer buffer
water_int_radiusk$pop_est<- extract(raster_population,water_int_radiusk, fun = sum, na.rm=TRUE)
# Find which catchment each polygon belongs to using its centroid
assign.catchment <- st_intersection(st_centroid(water_int_radiusk), catchment)
# Calculated total population living X distance for each facility
npeople <- assign.catchment %>% group_by(Names) %>%
summarize(pop_distance = sum(pop_est, na.rm = TRUE))
finalized <- merge(catchment, st_drop_geometry(npeople), by='Names', all.x = TRUE)
return(out=finalized)
}
# Create buffer distances for 2018 object
run1k_2018<- nachulu(water=surfaceWater_2018, distance=1000, catchment=malire,
raster_population = kasungu_population_2018)
nachulu <- function(water, distance, catchment, raster_population){
#Buffer the 'water' vector file by 'distance' meters
buffer_radiusk <- st_buffer(water, distance)
# Dissolve the buffers
buffer_radiusk_union <- st_cast(st_union(buffer_radiusk),"POLYGON")
### Assign Attributes of the 'catchment' to each of the waterbodies.
int_radiusk <- st_intersection(buffer_radiusk_union, catchment)
water_int_radiusk <- st_as_sf(int_radiusk)
# This joined dataset isn't quite right as you go from having 62 polygons to 188. I think it's something to do with the boundary lines, with buffered
# polygons being seen to be in multiple catchments
st_intersects(water_int_radiusk, catchment)
#Estimation of population within X kilometer buffer
water_int_radiusk$pop_est<- extract(raster_population,water_int_radiusk, fun = sum, na.rm=TRUE)
# Find which catchment each polygon belongs to using its centroid
assign.catchment <- st_intersection(st_centroid(water_int_radiusk), catchment)
# Calculated total population living X distance for each facility
npeople <- assign.catchment %>% group_by(Names) %>%
summarize(pop_distance = sum(pop_est, na.rm = TRUE))
finalized <- merge(catchment, st_drop_geometry(npeople), by='Names', all.x = TRUE)
return(out=finalized)
}
# Create buffer distances for 2018 object
run1k_2018<- nachulu(water=surfaceWater_2018, distance=1000, catchment=malire,
raster_population = kasungu_population_2018)
# Create buffer distances for 2018 object
run1k_2018<- nachulu(water=surfaceWater_2018, distance=1000, catchment=malire,
raster_population = kasungu_population_2018)
surfaceWater_2018 <- st_as_sf(st_cast(st_union(st_buffer(water_2018, 30)), "POLYGON"))
surfaceWater_2019 <- st_as_sf(st_cast(st_union(st_buffer(water_2019, 30)), "POLYGON"))
# View buffer
class(surfaceWater_2018)
head(surfaceWater_2018)
tm_shape(surfaceWater_2018)
surfaceWater_2018 <- st_as_sf(st_cast(st_union(st_buffer(water_2018, 30)), "POLYGON"))
surfaceWater_2019 <- st_as_sf(st_cast(st_union(st_buffer(water_2019, 30)), "POLYGON"))
# View buffer
class(surfaceWater_2018)
head(surfaceWater_2018)
nachulu <- function(water, distance, catchment, raster_population){
#Buffer the 'water' vector file by 'distance' meters
buffer_radiusk <- st_buffer(water, distance)
# Dissolve the buffers
buffer_radiusk_union <- st_cast(st_union(buffer_radiusk),"POLYGON")
### Assign Attributes of the 'catchment' to each of the waterbodies.
int_radiusk <- st_intersection(buffer_radiusk_union, catchment)
water_int_radiusk <- st_as_sf(int_radiusk)
# This joined dataset isn't quite right as you go from having 62 polygons to 188. I think it's something to do with the boundary lines, with buffered
# polygons being seen to be in multiple catchments
st_intersects(water_int_radiusk, catchment)
#Estimation of population within X kilometer buffer
water_int_radiusk$pop_est<- extract(raster_population,water_int_radiusk, fun = sum, na.rm=TRUE)
# Find which catchment each polygon belongs to using its centroid
assign.catchment <- st_intersection(st_centroid(water_int_radiusk), catchment)
# Calculated total population living X distance for each facility
npeople <- assign.catchment %>% group_by(Names) %>%
summarize(pop_distance = sum(pop_est, na.rm = TRUE))
finalized <- merge(catchment, st_drop_geometry(npeople), by='Names', all.x = TRUE)
return(out=finalized)
}
head(kasungu_population_2018)
str(kasungu_population_2018)
raster(kasungu_population_2018)
plot(kasungu_population_2018)
raster(kasungu_population_2018)
plot(kasungu_population_2018, kasungu_population_2019)
plot(kasungu_population_2018)
plot(kasungu_population_2019)
plot(surfaceWater_2018)
# View buffer
class(surfaceWater_2018)
head(surfaceWater_2018)
vals <- getValues(kasungu_population_2018)
head(vals)
hist(vals)
plotRGB(kasungu_population_2018)
plot(kasungu_population_2018)
ncell(kasungu_population_2018)
m <- c(0, 7,
8, 55,
56, 120,
121, 223,
224, 500)
pop <- matrix(m, ncol = 5, byrow = TRUE)
k2018 <- reclassify(kasungu_population_2018, pop)
pop <- matrix(m, ncol = 1, byrow = TRUE)
k2018 <- reclassify(kasungu_population_2018, pop)
pop <- matrix(m, ncol = 2, byrow = TRUE)
k2018 <- reclassify(kasungu_population_2018, pop)
plot(k2018)
k2018 <- reclassify(pop, rcl = kasungu_population_2018)
k2018 <- reclassifykasungu_population_2018, rcl=pop)
m <- c(0,500, NA)
k2018 <- reclassify(kasungu_population_2018, rcl = m)
plot(k2018)
m <- c(0,7,55,120,223,500, NA)
k2018 <- reclassify(kasungu_population_2018, rcl = m)
plot(k2018)
m <- c(0,7,55,120,223,500)
k2018 <- reclassify(kasungu_population_2018, rcl = m)
plot(k2018)
plot(kasungu_population_2018)
kasungu_population_2018 <- projectRaster(kasungu_population_2018,
crs="+proj=utm +zone=36 +south +datum=WGS84 +units=m")
kasungu_population_2018
plot(kasungu_population_2018)
kasungu_population_2019 <- projectRaster(kasungu_population_2019,
crs="+proj=utm +zone=36 +south +datum=WGS84 +units=m")
kasungu_population_2019
plot(kasungu_population_2019)
kasungu_population_2018
m <- c(0,23004.55)
k2018 <- reclassify(kasungu_population_2018, rcl = m)
plot(k2018)
plot(kasungu_population_2018)
plot(kasungu_population_2018, xlab="Longitude", ylab="Latitude")
plot(kasungu_population_2018, col = "darkred")
plot(kasungu_population_2018)
df <- data.frame( rasterToPoints( kasungu_population_2018 ))
names(df) <- c("Longitude","Latitude","Population")
p <- ggplot( df ) + geom_tile( aes(x=Longitude,y=Latitude,fill=Elevation))
p <- p + scale_fill_gradientn( colors=c('#a6611a','#dfc27d','#f5f5f5','#80cdc1','#018571'))
p <- p + coord_equal() + xlab("Longitude") + ylab("Latitude")
p
p <- ggplot( df ) + geom_tile( aes(x=Longitude,y=Latitude,fill=Population))
p <- p + scale_fill_gradientn( colors=c('#a6611a','#dfc27d','#f5f5f5','#80cdc1','#018571'))
p <- p + coord_equal() + xlab("Longitude") + ylab("Latitude")
p
kasungu_population_2018
plot(kasungu_population_2018)
plot(kasungu_population_2018, palette = "BuPu")
plot(kasungu_population_2018, col = "BuPu")
plot(kasungu_population_2018)
pal <- colorNumeric(c("#556270", "#4ECDC4", "#C7F464", "#FF6B6B", "#C44D58"),
values(kasungu_population_2018),
na.color = "transparent")
library(leaflet)
pal <- colorNumeric(c("#556270", "#4ECDC4", "#C7F464", "#FF6B6B", "#C44D58"),
values(kasungu_population_2018),
na.color = "transparent")
plot(kasungu_population_2018, col = pal)
plot(kasungu_population_2018, col(pal))
getValues(kasungu_population_2018)
kasungu_population_2018 <- projectRaster(kasungu_population_2018,
crs="+proj=utm +zone=36 +south +datum=WGS84 +units=m") kasungu_population_2018
kasungu_population_2018 <- projectRaster(kasungu_population_2018,
crs="+proj=utm +zone=36 +south +datum=WGS84 +units=m") kasungu_population_2018
kasungu_population_2018 <- projectRaster(kasungu_population_2018,
crs="+proj=utm +zone=36 +south +datum=WGS84 +units=m") kasungu_population_2018
kasungu_population_2018
d <- c(0, 50,100, 500,100)
jk <- reclassify(kasungu_population_2018, rcl = d)
d <- c(0, 50,100, 500,1000)
jk <- reclassify(kasungu_population_2018, rcl = d)
d <- c(01000)
d <- c(0,1000)
jk <- reclassify(kasungu_population_2018, rcl = d)
d <- c(0,1000)
d <- c(0,1000)
jk <- reclassify(kasungu_population_2018, rcl = d)
d <- c(0,7,
10,1000)
jk <- reclassify(kasungu_population_2018, rcl = d)
kasungu_population_2018
plot(kasungu_population_2018)
tm_shape(kasungu_population_2018)
tm_shape(kasungu_population_2018)+
tm_fill()
qtm(kasungu_population_2018)
tm_shape(kasungu_population_2018)+
tm_raster()
tm_shape(kasungu_population_2018)+
tm_raster(alpha = .5)
tm_shape(kasungu_population_2018)+
tm_raster()
pal8 <- c("#33A02C", "#B2DF8A", "#FDBF6F", "#1F78B4", "#999999", "#E31A1C", "#E6E6E6", "#A6CEE3")
tm_shape(kasungu_population_2018) +
tm_raster(palette = pal8, title = "")
tm_shape(kasungu_population_2018) +
tm_raster(palette = pal8, title = "",  style = ifelse(is.null(breaks), "pretty", "fixed"))
tm_shape(kasungu_population_2018) +
tm_raster(palette = pal8, title = "",  style = "pretty")
tm_shape(kasungu_population_2018) +
tm_raster(palette = "Reds", title = "",  style = "quantile")
tm_shape(kasungu_population_2018) +
tm_raster(palette = "Reds", title = "",  style = "equal")
tm_shape(kasungu_population_2018) +
tm_raster(palette = "Reds", title = "",  style = "jenks")
tm_shape(kasungu_population_2018) +
tm_raster(palette = "Reds", title = "",  style = "fisher")
tm_shape(kasungu_population_2018) +
tm_raster(palette = "Reds", title = "",  style = "fixed")
tm_shape(kasungu_population_2018) +
tm_raster(palette = "Reds", title = "",  style = "sd")
tm_shape(kasungu_population_2018) +
tm_raster(palette = "Reds", title = "",  style = "cat")
tm_shape(kasungu_population_2018) +
tm_raster(palette = "Reds", title = "",  style = "quantile")
plot(kasungu_population_2018)
tm_shape(kasungu_population_2018) +
tm_raster(palette = "Reds", title = "",  style = "quantile")
tm_shape(kasungu_population_2018) +
tm_raster(palette = "Reds", title = "",  style = "quantile")+
tm_layout(legend.position = c("left","bottom"))
tm_shape(kasungu_population_2018) +
tm_raster(palette = "Reds", title = "Estimated total number of people per grid-cell",  style = "quantile")+
tm_layout(legend.position = c("left","bottom"))
tm_shape(kasungu_population_2018) +
tm_raster(palette = "Reds", title = "2018",  style = "quantile")+
tm_layout(legend.position = c("left","bottom"))
ku_pop_2018 <- tm_shape(kasungu_population_2018)+
tm_raster(palette = "Reds", title = "2018",  style = "quantile")+
tm_layout(legend.position = c("left","bottom"))
ku_pop_2019 <- tm_shape(kasungu_population_2019)+
tm_raster(palette = "Reds", title = "2019", style = "quantile")+
tm_layout(legend.position = c("left", "bottom"))
tmap_arrange(ku_pop_2018, ku_pop_2019)
ku_pop_2019 <- tm_shape(kasungu_population_2019)+
tm_raster(palette = "Reds", title = "Estimated total number of people per 1km grid-cell", style = "quantile")+
tm_layout(legend.position = c("left", "bottom"))
tmap_arrange(ku_pop_2018, ku_pop_2019)
ku_pop_2019 <- tm_shape(kasungu_population_2019)+
tm_raster(palette = "Reds", title = "2019", style = "quantile")+
tm_layout(legend.position = c("left", "bottom"))
tmap_arrange(ku_pop_2018, ku_pop_2019)
pop_2018 <- tm_shape(kasungu_population_2018)+
tm_raster(palette = "Reds", title = "2018",  style = "quantile")+
tm_layout(legend.position = c("left","bottom"))
pop_2019 <- tm_shape(kasungu_population_2019)+
tm_raster(palette = "Reds", title = "2019", style = "quantile")+
tm_layout(legend.position = c("left", "bottom"))
tmap_arrange(pop_2018, pop_2019)
nachulu <- function(water, distance, catchment, raster_population){
#Buffer the 'water' vector file by 'distance' meters
buffer_radiusk <- st_buffer(water, distance)
# Dissolve the buffers
buffer_radiusk_union <- st_cast(st_union(buffer_radiusk),"POLYGON")
### Assign Attributes of the 'catchment' to each of the waterbodies.
int_radiusk <- st_intersection(buffer_radiusk_union, catchment)
water_int_radiusk <- st_as_sf(int_radiusk)
# This joined dataset isn't quite right as you go from having 62 polygons to 188. I think it's something to do with the boundary lines, with buffered
# polygons being seen to be in multiple catchments
st_intersects(water_int_radiusk, catchment)
#Estimation of population within X kilometer buffer
water_int_radiusk$pop_est<- extract(raster_population,water_int_radiusk, fun = sum, na.rm=TRUE)
# Find which catchment each polygon belongs to using its centroid
assign.catchment <- st_intersection(st_centroid(water_int_radiusk), catchment)
# Calculated total population living X distance for each facility
npeople <- assign.catchment %>% group_by(Names) %>%
summarize(pop_distance = sum(pop_est, na.rm = TRUE))
finalized <- merge(catchment, st_drop_geometry(npeople), by='Names', all.x = TRUE)
return(out=finalized)
}
# Create buffer distances for 2018 object
run1k_2018<- nachulu(water=surfaceWater_2018, distance=1000, catchment=malire,
raster_population = kasungu_population_2018)
rlang::last_error()
rlang::last_trace()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rlang::last_error()
rlang::last_trace()
surfaceWater_2018 <- st_as_sf(st_cast(st_union(st_buffer(water_2018, 30)), "POLYGON"))
surfaceWater_2019 <- st_as_sf(st_cast(st_union(st_buffer(water_2019, 30)), "POLYGON"))
# View buffer
head(surfaceWater_2018)
ggplot(surfaceWater_2018) + geom_sf() + theme_bw()
?st_centroid
?st_union
?st_cast
